import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="Demo Factoring", layout="wide")
st.title("üíº Plataforma de Automatizaci√≥n de Factoring")

tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üßæ Clientes y Contratos",
    "üí∞ Fondos de Inversionistas",
    "üìÑ Notas de Cr√©dito",
    "üìä Comisiones y Distribuci√≥n",
    "üìà Dashboard Operativo",
    "üïµÔ∏è‚Äç‚ôÇÔ∏è An√°lisis de Anomal√≠as"
])

with tab1:
    st.header("Gesti√≥n de Clientes y Contratos")
    with st.form("form_cliente"):
        nombre = st.text_input("Nombre del Cliente")
        ruc = st.text_input("RUC")
        monto_financiado = st.number_input("Monto financiado del reclamo (USD)", min_value=0.0)
        tipo_reclamo = st.selectbox("Tipo de Reclamo", ["IVA", "IR", "ISD"])
        kyc_ok = st.checkbox("Documentaci√≥n KYC completa")
        contrato_firmado = st.checkbox("Contrato firmado")
        garantia_validada = st.checkbox("Garant√≠a validada")
        submit = st.form_submit_button("Registrar Cliente")
        if submit:
            if not nombre or not ruc or monto_financiado == 0.0:
                st.error("Por favor completa todos los campos obligatorios.")
            elif not (kyc_ok and contrato_firmado and garantia_validada):
                st.warning("Faltan requisitos documentales.")
            else:
                st.success(f"‚úÖ Cliente '{nombre}' registrado con reclamo de tipo {tipo_reclamo}.")
                st.info("Cliente vinculado con el SRI para trazabilidad tributaria.")

with tab2:
    st.header("Administraci√≥n de Fondos de Inversionistas")
    with st.form("form_fondos"):
        inversionista = st.text_input("Nombre del Inversionista")
        tipo = st.selectbox("Tipo de Inversionista", ["Interno", "Externo"])
        monto_aporte = st.number_input("Monto del Aporte (USD)", min_value=0.0)
        operaciones = st.number_input("N√∫mero de Operaciones Financiadas", min_value=1)
        submitted = st.form_submit_button("Registrar Aporte")
        if submitted:
            if not inversionista or monto_aporte == 0.0:
                st.error("Nombre del inversionista y monto son obligatorios.")
            else:
                rendimiento = (monto_aporte * 0.12) / operaciones
                st.success(f"Aporte registrado: {monto_aporte} USD por '{inversionista}'")
                st.info(f"Rendimiento estimado por operaci√≥n: ${rendimiento:.2f} USD")
                st.warning("Evaluaci√≥n de riesgo: Diversificaci√≥n recomendada.")

with tab3:
    st.header("Seguimiento de Notas de Cr√©dito")
    with st.form("form_notas"):
        cliente = st.text_input("Cliente")
        valor_nota = st.number_input("Valor de la Nota (USD)", min_value=0.0)
        fecha_esperada = st.date_input("Fecha Esperada de Emisi√≥n")
        submit_nota = st.form_submit_button("Registrar Nota")
        if submit_nota:
            if not cliente or valor_nota == 0.0:
                st.error("Por favor completa los datos obligatorios.")
            else:
                st.success(f"Nota de cr√©dito registrada para {cliente} por ${valor_nota:.2f}")

with tab4:
    st.header("Motor de C√°lculo de Comisiones")
    with st.form("form_comisiones"):
        operacion_id = st.text_input("ID de la Operaci√≥n")
        monto_operacion = st.number_input("Monto de la Operaci√≥n (USD)", min_value=0.0)
        porcentaje_comision = st.slider("Porcentaje de Comisi√≥n (%)", 0, 20, 10)
        submit_comision = st.form_submit_button("Calcular Comisi√≥n")
        if submit_comision:
            if not operacion_id or monto_operacion == 0.0:
                st.error("Debes ingresar los datos de operaci√≥n.")
            else:
                comision = monto_operacion * (porcentaje_comision / 100)
                utilidad_neta = monto_operacion - comision
                st.success(f"Comisi√≥n calculada: ${comision:.2f}")
                st.info(f"Utilidad neta: ${utilidad_neta:.2f}")

with tab5:
    st.header("Panel de Control y Anal√≠tica Operativa")
    st.subheader("üìä Indicadores Generales")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Total Financiado", "$125,000")
        st.metric("Notas de Cr√©dito Emitidas", "18")
    with col2:
        st.metric("Comisi√≥n Promedio (%)", "10%")
        st.metric("Inversionistas Activos", "5")

    st.subheader("üîç Distribuci√≥n de Aportes")
    aportes_df = pd.DataFrame({
        "Inversionista": ["Juan", "Mar√≠a", "Carlos", "Ana"],
        "Monto (USD)": [20000, 35000, 15000, 30000]
    })
    fig1, ax1 = plt.subplots()
    ax1.pie(aportes_df["Monto (USD)"], labels=aportes_df["Inversionista"], autopct="%1.1f%%")
    ax1.axis("equal")
    st.pyplot(fig1)

    st.subheader("üìà Comisiones por Operaci√≥n")
    operaciones_df = pd.DataFrame({
        "Operaci√≥n": ["OP001", "OP002", "OP003", "OP004"],
        "Monto": [30000, 25000, 40000, 30000],
        "Comisi√≥n": [3000, 2500, 4000, 3000]
    })
    fig2, ax2 = plt.subplots()
    ax2.bar(operaciones_df["Operaci√≥n"], operaciones_df["Comisi√≥n"])
    ax2.set_ylabel("USD")
    ax2.set_title("Comisiones Generadas")
    st.pyplot(fig2)

with tab6:
    st.header("Detecci√≥n de Anomal√≠as (Arbutus Software)")
    st.write("- Integraci√≥n en tiempo real con datos operativos")
    st.write("- Supervisi√≥n continua con reglas de auditor√≠a")
    st.write("- Generaci√≥n de alertas inteligentes")
    if st.button("üîç Ejecutar an√°lisis de anomal√≠as"):
        st.warning("2 notas de cr√©dito duplicadas encontradas.")